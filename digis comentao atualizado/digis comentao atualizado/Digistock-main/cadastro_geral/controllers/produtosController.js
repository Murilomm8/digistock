// Importa o model Produto (caso seja necess√°rio para opera√ß√µes espec√≠ficas)
// e a conex√£o com o banco de dados configurada em db.js
const db = require('../config/db');

// Fun√ß√£o para listar todos os produtos, incluindo informa√ß√µes de categoria e fornecedor
const listarProdutos = async (req, res) => {
    try {
        // Consulta SQL que recupera os dados dos produtos, 
        // utilizando LEFT JOIN para obter categoria e fornecedor, se dispon√≠veis.
        // COALESCE √© usado para fornecer valores padr√£o caso a categoria ou fornecedor n√£o sejam encontrados.
        const sql = `
            SELECT 
                p.id, 
                p.nome, 
                p.codigo_barras, 
                COALESCE(c.nome_categoria, 'Sem categoria') AS categoria, 
                COALESCE(f.nome, 'Sem fornecedor') AS fornecedor, 
                p.quantidade, 
                p.preco, 
                p.estoque_min
            FROM produtos_tb p
            LEFT JOIN categoria_tb c ON p.categoria_id = c.id
            LEFT JOIN fornecedor_tb f ON p.fornecedor_id = f.id
            ORDER BY p.nome ASC
        `;
        const [produtos] = await db.query(sql);

        // Caso n√£o existam produtos na tabela, responde com 404
        if (produtos.length === 0) {
            return res.status(404).json({ erro: "Nenhum produto encontrado." });
        }

        // Retorna a lista de produtos com status 200 (OK)
        res.status(200).json(produtos);
    } catch (error) {
        console.error("Erro ao buscar produtos:", error);
        res.status(500).json({ erro: "Erro interno ao buscar produtos." });
    }
};

// Fun√ß√£o para listar produtos cujo estoque esteja abaixo do estoque m√≠nimo
const listarProdutosAbaixoEstoque = async (req, res) => {
    try {
        // Consulta semelhante √† de listarProdutos, mas com condi√ß√£o que
        // s√≥ retorna produtos onde a quantidade √© inferior ao estoque m√≠nimo.
        const sql = `
            SELECT 
                p.id, 
                p.nome, 
                p.codigo_barras, 
                COALESCE(c.nome_categoria, 'Sem categoria') AS categoria, 
                COALESCE(f.nome, 'Sem fornecedor') AS fornecedor, 
                p.quantidade, 
                p.preco, 
                p.estoque_min
            FROM produtos_tb p
            LEFT JOIN categoria_tb c ON p.categoria_id = c.id
            LEFT JOIN fornecedor_tb f ON p.fornecedor_id = f.id
            WHERE p.quantidade < p.estoque_min
            ORDER BY p.nome ASC
        `;
        const [produtos] = await db.query(sql);
        
        // Se nenhum produto abaixo do estoque m√≠nimo for encontrado, retorna status 404
        if (produtos.length === 0) {
            return res.status(404).json({ erro: "Nenhum produto abaixo do estoque m√≠nimo encontrado." });
        }
        res.status(200).json(produtos);
    } catch (error) {
        console.error("Erro ao buscar produtos abaixo do estoque m√≠nimo:", error);
        res.status(500).json({ erro: "Erro interno ao buscar produtos abaixo do estoque m√≠nimo." });
    }
};

// Fun√ß√£o para criar um novo produto
const criarProduto = async (req, res) => {
    try {
        console.log("üìå Dados recebidos:", req.body);
        // Desestrutura√ß√£o dos dados recebidos no corpo da requisi√ß√£o
        const { nome, codigo_barras, categoria_id, fornecedor_id, quantidade, preco, estoque_min } = req.body;

        // Valida√ß√£o simples: verifica se todos os campos obrigat√≥rios foram informados e n√£o est√£o vazios.
        // √â utilizada a verifica√ß√£o com o optional chaining (?.) e trim() para garantir que n√£o haja espa√ßos em branco
        if (!nome?.trim() || !codigo_barras?.trim() || !categoria_id || !fornecedor_id || !preco || !quantidade || !estoque_min) {
            return res.status(400).json({ erro: "Todos os campos s√£o obrigat√≥rios!" });
        }

        // Verifica se o c√≥digo de barras j√° existe na base de dados para evitar duplicidade
        const checkQuery = "SELECT id FROM produtos_tb WHERE codigo_barras = ?";
        const [existente] = await db.query(checkQuery, [codigo_barras]);

        if (existente.length > 0) {
            return res.status(409).json({ erro: `O c√≥digo de barras '${codigo_barras}' j√° est√° cadastrado.` });
        }

        // Query SQL para inserir os dados do novo produto
        const sql = `
            INSERT INTO produtos_tb (nome, codigo_barras, categoria_id, fornecedor_id, quantidade, preco, estoque_min)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        `;
        const values = [nome.trim(), codigo_barras.trim(), categoria_id, fornecedor_id, quantidade, preco, estoque_min];

        const [result] = await db.query(sql, values);
        console.log("üìå Query executada. Resultado:", result);
        res.status(201).json({ id: result.insertId, nome });
    } catch (error) {
        console.error("‚ùå Erro ao adicionar produto:", error);
        res.status(500).json({ erro: "Erro interno ao adicionar produto." });
    }
};

// Fun√ß√£o para excluir um produto com base no id recebido via URL
const excluirProduto = async (req, res) => {
    try {
        const { id } = req.params;
        // Verifica se o produto existe antes de tentar exclu√≠-lo
        const checkSql = 'SELECT id FROM produtos_tb WHERE id = ?';
        const [produto] = await db.query(checkSql, [id]);

        if (produto.length === 0) {
            return res.status(404).json({ erro: "Produto n√£o encontrado." });
        }

        // Caso exista, excuta a query de dele√ß√£o
        const deleteSql = 'DELETE FROM produtos_tb WHERE id = ?';
        await db.query(deleteSql, [id]);
        res.status(200).json({ mensagem: "Produto exclu√≠do com sucesso!" });
    } catch (error) {
        console.error("Erro ao excluir produto:", error);
        res.status(500).json({ erro: "Erro interno ao excluir produto." });
    }
};

// Fun√ß√£o para atualizar um produto existente com os novos dados recebidos
const atualizarProduto = async (req, res) => {
    try {
        const { id } = req.params;
        const { nome, codigo_barras, categoria_id, fornecedor_id, quantidade, preco, estoque_min } = req.body;

        // Valida√ß√£o para garantir que todos os campos obrigat√≥rios estejam preenchidos
        if (!nome?.trim() || !codigo_barras?.trim() || !categoria_id || !fornecedor_id || !preco || !quantidade || !estoque_min) {
            return res.status(400).json({ erro: "Todos os campos s√£o obrigat√≥rios!" });
        }

        // Query SQL para atualizar os campos do produto com base no id
        const sql = `
            UPDATE produtos_tb 
            SET nome = ?, codigo_barras = ?, categoria_id = ?, fornecedor_id = ?, quantidade = ?, preco = ?, estoque_min = ?
            WHERE id = ?
        `;
        await db.query(sql, [nome.trim(), codigo_barras.trim(), categoria_id, fornecedor_id, quantidade, preco, estoque_min, id]);
        res.status(200).json({ mensagem: "Produto atualizado com sucesso!" });
    } catch (error) {
        console.error("Erro ao atualizar produto:", error);
        res.status(500).json({ erro: "Erro interno ao atualizar produto." });
    }
};

// Fun√ß√£o para buscar um produto espec√≠fico pelo seu ID
const buscarProduto = async (req, res) => {
    try {
        const { id } = req.params;
        // Consulta SQL para recuperar os dados do produto com base no seu id
        const sql = 'SELECT id, nome, codigo_barras, categoria_id, fornecedor_id, quantidade, preco, estoque_min FROM produtos_tb WHERE id = ?';
        const [produto] = await db.query(sql, [id]);

        // Se n√£o for encontrado, retorna status 404
        if (produto.length === 0) {
            return res.status(404).json({ erro: "Produto n√£o encontrado." });
        }

        res.status(200).json(produto[0]);
    } catch (error) {
        console.error("Erro ao buscar produto:", error);
        res.status(500).json({ erro: "Erro interno ao buscar produto." });
    }
};

// Fun√ß√£o para buscar um produto com base no c√≥digo de barras
const buscarProdutoPorCodigo = async (req, res) => {
    try {
        const { codigo_barras } = req.params;
        // Consulta SQL para localizar o produto com o c√≥digo de barras fornecido
        const sql = 'SELECT id, nome, codigo_barras, categoria_id, fornecedor_id, quantidade, preco, estoque_min FROM produtos_tb WHERE codigo_barras = ?';
        const [produto] = await db.query(sql, [codigo_barras]);

        if (produto.length === 0) {
            return res.status(404).json({ erro: "Produto n√£o encontrado." });
        }

        res.status(200).json(produto[0]);
    } catch (error) {
        console.error("Erro ao buscar produto por c√≥digo de barras:", error);
        res.status(500).json({ erro: "Erro interno ao buscar produto." });
    }
};

// Exporta todas as fun√ß√µes para utiliza√ß√£o em outras partes da aplica√ß√£o (por exemplo, nas rotas)
module.exports = { 
  listarProdutos, 
  listarProdutosAbaixoEstoque, 
  criarProduto, 
  excluirProduto, 
  atualizarProduto, 
  buscarProduto, 
  buscarProdutoPorCodigo 
};
